datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Word          Word[]
  Comment       Comment[]
  WordLike      WordLike[]
  Save          Save[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Word {
  id        Int        @id @default(autoincrement())
  title     String
  meaning   String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  Comment   Comment[]
  WordLike  WordLike[]
  Save      Save[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  word      Word     @relation(fields: [wordId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id])
  wordId    Int
  authorId  String
}

model WordLike {
  word     Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)
  author   User   @relation(fields: [authorId], references: [id])
  wordId   Int
  authorId String

  @@id([authorId, wordId])
}

model Save {
  word     Word   @relation(fields: [wordId], references: [id], onDelete: Cascade)
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  wordId   Int
  authorId String

  @@id([authorId, wordId])
}
